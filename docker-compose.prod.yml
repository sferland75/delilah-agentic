version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: delilah-postgres-prod
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - delilah-network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: delilah-backend-prod
    restart: always
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --workers 4
    networks:
      - delilah-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    container_name: delilah-frontend-prod
    restart: always
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - delilah-network

  nginx:
    image: nginx:alpine
    container_name: delilah-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - delilah-network

volumes:
  postgres_data:

networks:
  delilah-network:
    driver: bridge